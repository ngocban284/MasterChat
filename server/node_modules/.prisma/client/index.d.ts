import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.11.0
 * Query Engine version: 58369335532e47bdcec77a2f1e7c1fb83a463918
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'


/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']
  /**
   * @deprecated renamed to `$transaction`
   */
  transaction: PromiseConstructor['all']

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): RoomDelegate;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): MessageDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ModelName: {
  User: 'User',
  Room: 'Room',
  Message: 'Message'
};

export declare type ModelName = (typeof ModelName)[keyof typeof ModelName]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  nickName: 'nickName',
  avatar: 'avatar',
  password: 'password',
  lang: 'lang',
  isDeleted: 'isDeleted',
  createAt: 'createAt',
  updateAt: 'updateAt'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const RoomDistinctFieldEnum: {
  id: 'id',
  avatar: 'avatar',
  code: 'code',
  createAt: 'createAt',
  updateAt: 'updateAt'
};

export declare type RoomDistinctFieldEnum = (typeof RoomDistinctFieldEnum)[keyof typeof RoomDistinctFieldEnum]


export declare const MessageDistinctFieldEnum: {
  id: 'id',
  text: 'text',
  source: 'source',
  roomId: 'roomId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type MessageDistinctFieldEnum = (typeof MessageDistinctFieldEnum)[keyof typeof MessageDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model User
 */

export type User = {
  id: number
  nickName: string
  avatar: string
  password: string | null
  lang: string
  isDeleted: boolean
  createAt: Date
  updateAt: Date
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  nickName?: boolean
  avatar?: boolean
  password?: boolean
  lang?: boolean
  rooms?: boolean | FindManyRoomArgs
  messages?: boolean | FindManyMessageArgs
  isDeleted?: boolean
  createAt?: boolean
  updateAt?: boolean
}

export type UserInclude = {
  rooms?: boolean | FindManyRoomArgs
  messages?: boolean | FindManyMessageArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'rooms'
      ? Array<RoomGetPayload<S['include'][P]>> :
      P extends 'messages'
      ? Array<MessageGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'rooms'
      ? Array<RoomGetPayload<S['select'][P]>> :
      P extends 'messages'
      ? Array<MessageGetPayload<S['select'][P]>> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args?: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  rooms<T extends FindManyRoomArgs = {}>(args?: Subset<T, FindManyRoomArgs>): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>;

  messages<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
}



/**
 * Model Room
 */

export type Room = {
  id: number
  avatar: string
  code: string
  createAt: Date
  updateAt: Date
}


export type AggregateRoom = {
  count: number
  avg: RoomAvgAggregateOutputType | null
  sum: RoomSumAggregateOutputType | null
  min: RoomMinAggregateOutputType | null
  max: RoomMaxAggregateOutputType | null
}

export type RoomAvgAggregateOutputType = {
  id: number
}

export type RoomSumAggregateOutputType = {
  id: number
}

export type RoomMinAggregateOutputType = {
  id: number
}

export type RoomMaxAggregateOutputType = {
  id: number
}


export type RoomAvgAggregateInputType = {
  id?: true
}

export type RoomSumAggregateInputType = {
  id?: true
}

export type RoomMinAggregateInputType = {
  id?: true
}

export type RoomMaxAggregateInputType = {
  id?: true
}

export type AggregateRoomArgs = {
  where?: RoomWhereInput
  orderBy?: XOR<Enumerable<RoomOrderByInput>, RoomOrderByInput>
  cursor?: RoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
  count?: true
  avg?: RoomAvgAggregateInputType
  sum?: RoomSumAggregateInputType
  min?: RoomMinAggregateInputType
  max?: RoomMaxAggregateInputType
}

export type GetRoomAggregateType<T extends AggregateRoomArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetRoomAggregateScalarType<T[P]>
}

export type GetRoomAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof RoomAvgAggregateOutputType ? RoomAvgAggregateOutputType[P] : never
}
    
    

export type RoomSelect = {
  id?: boolean
  avatar?: boolean
  code?: boolean
  users?: boolean | FindManyUserArgs
  messages?: boolean | FindManyMessageArgs
  createAt?: boolean
  updateAt?: boolean
}

export type RoomInclude = {
  users?: boolean | FindManyUserArgs
  messages?: boolean | FindManyMessageArgs
}

export type RoomGetPayload<
  S extends boolean | null | undefined | RoomArgs,
  U = keyof S
> = S extends true
  ? Room
  : S extends undefined
  ? never
  : S extends RoomArgs | FindManyRoomArgs
  ? 'include' extends U
    ? Room  & {
      [P in TrueKeys<S['include']>]:
      P extends 'users'
      ? Array<UserGetPayload<S['include'][P]>> :
      P extends 'messages'
      ? Array<MessageGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Room ? Room[P]
: 
      P extends 'users'
      ? Array<UserGetPayload<S['select'][P]>> :
      P extends 'messages'
      ? Array<MessageGetPayload<S['select'][P]>> : never
    }
  : Room
: Room


export interface RoomDelegate {
  /**
   * Find zero or one Room that matches the filter.
   * @param {FindOneRoomArgs} args - Arguments to find a Room
   * @example
   * // Get one Room
   * const room = await prisma.room.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRoomArgs>(
    args: Subset<T, FindOneRoomArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>
  /**
   * Find the first Room that matches the filter.
   * @param {FindFirstRoomArgs} args - Arguments to find a Room
   * @example
   * // Get one Room
   * const room = await prisma.room.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstRoomArgs>(
    args?: Subset<T, FindFirstRoomArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>
  /**
   * Find zero or more Rooms that matches the filter.
   * @param {FindManyRoomArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rooms
   * const rooms = await prisma.room.findMany()
   * 
   * // Get first 10 Rooms
   * const rooms = await prisma.room.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyRoomArgs>(
    args?: Subset<T, FindManyRoomArgs>
  ): CheckSelect<T, Promise<Array<Room>>, Promise<Array<RoomGetPayload<T>>>>
  /**
   * Create a Room.
   * @param {RoomCreateArgs} args - Arguments to create a Room.
   * @example
   * // Create one Room
   * const Room = await prisma.room.create({
   *   data: {
   *     // ... data to create a Room
   *   }
   * })
   * 
  **/
  create<T extends RoomCreateArgs>(
    args: Subset<T, RoomCreateArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Delete a Room.
   * @param {RoomDeleteArgs} args - Arguments to delete one Room.
   * @example
   * // Delete one Room
   * const Room = await prisma.room.delete({
   *   where: {
   *     // ... filter to delete one Room
   *   }
   * })
   * 
  **/
  delete<T extends RoomDeleteArgs>(
    args: Subset<T, RoomDeleteArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Update one Room.
   * @param {RoomUpdateArgs} args - Arguments to update one Room.
   * @example
   * // Update one Room
   * const room = await prisma.room.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends RoomUpdateArgs>(
    args: Subset<T, RoomUpdateArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Delete zero or more Rooms.
   * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
   * @example
   * // Delete a few Rooms
   * const { count } = await prisma.room.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RoomDeleteManyArgs>(
    args: Subset<T, RoomDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Rooms.
   * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rooms
   * const room = await prisma.room.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RoomUpdateManyArgs>(
    args: Subset<T, RoomUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Room.
   * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
   * @example
   * // Update or create a Room
   * const room = await prisma.room.upsert({
   *   create: {
   *     // ... data to create a Room
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Room we want to update
   *   }
   * })
  **/
  upsert<T extends RoomUpsertArgs>(
    args: Subset<T, RoomUpsertArgs>
  ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyRoomArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateRoomArgs>(args: Subset<T, AggregateRoomArgs>): Promise<GetRoomAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Room.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__RoomClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  users<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

  messages<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Room findOne
 */
export type FindOneRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * Filter, which Room to fetch.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room findFirst
 */
export type FindFirstRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * Filter, which Room to fetch.
  **/
  where?: RoomWhereInput
  orderBy?: XOR<Enumerable<RoomOrderByInput>, RoomOrderByInput>
  cursor?: RoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
}


/**
 * Room findMany
 */
export type FindManyRoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * Filter, which Rooms to fetch.
  **/
  where?: RoomWhereInput
  /**
   * Determine the order of the Rooms to fetch.
  **/
  orderBy?: XOR<Enumerable<RoomOrderByInput>, RoomOrderByInput>
  /**
   * Sets the position for listing Rooms.
  **/
  cursor?: RoomWhereUniqueInput
  /**
   * The number of Rooms to fetch. If negative number, it will take Rooms before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Rooms.
  **/
  skip?: number
  distinct?: Enumerable<RoomDistinctFieldEnum>
}


/**
 * Room create
 */
export type RoomCreateArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * The data needed to create a Room.
  **/
  data: RoomCreateInput
}


/**
 * Room update
 */
export type RoomUpdateArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * The data needed to update a Room.
  **/
  data: RoomUpdateInput
  /**
   * Choose, which Room to update.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room updateMany
 */
export type RoomUpdateManyArgs = {
  data: RoomUpdateManyMutationInput
  where?: RoomWhereInput
}


/**
 * Room upsert
 */
export type RoomUpsertArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * The filter to search for the Room to update in case it exists.
  **/
  where: RoomWhereUniqueInput
  /**
   * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
  **/
  create: RoomCreateInput
  /**
   * In case the Room was found with the provided `where` argument, update it with this data.
  **/
  update: RoomUpdateInput
}


/**
 * Room delete
 */
export type RoomDeleteArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
  /**
   * Filter which Room to delete.
  **/
  where: RoomWhereUniqueInput
}


/**
 * Room deleteMany
 */
export type RoomDeleteManyArgs = {
  where?: RoomWhereInput
}


/**
 * Room without action
 */
export type RoomArgs = {
  /**
   * Select specific fields to fetch from the Room
  **/
  select?: XOR<RoomSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<RoomInclude, null>
}



/**
 * Model Message
 */

export type Message = {
  id: number
  text: string
  source: string
  roomId: number
  userId: number
  createdAt: Date
  updatedAt: Date
}


export type AggregateMessage = {
  count: number
  avg: MessageAvgAggregateOutputType | null
  sum: MessageSumAggregateOutputType | null
  min: MessageMinAggregateOutputType | null
  max: MessageMaxAggregateOutputType | null
}

export type MessageAvgAggregateOutputType = {
  id: number
  roomId: number
  userId: number
}

export type MessageSumAggregateOutputType = {
  id: number
  roomId: number
  userId: number
}

export type MessageMinAggregateOutputType = {
  id: number
  roomId: number
  userId: number
}

export type MessageMaxAggregateOutputType = {
  id: number
  roomId: number
  userId: number
}


export type MessageAvgAggregateInputType = {
  id?: true
  roomId?: true
  userId?: true
}

export type MessageSumAggregateInputType = {
  id?: true
  roomId?: true
  userId?: true
}

export type MessageMinAggregateInputType = {
  id?: true
  roomId?: true
  userId?: true
}

export type MessageMaxAggregateInputType = {
  id?: true
  roomId?: true
  userId?: true
}

export type AggregateMessageArgs = {
  where?: MessageWhereInput
  orderBy?: XOR<Enumerable<MessageOrderByInput>, MessageOrderByInput>
  cursor?: MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<MessageDistinctFieldEnum>
  count?: true
  avg?: MessageAvgAggregateInputType
  sum?: MessageSumAggregateInputType
  min?: MessageMinAggregateInputType
  max?: MessageMaxAggregateInputType
}

export type GetMessageAggregateType<T extends AggregateMessageArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetMessageAggregateScalarType<T[P]>
}

export type GetMessageAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof MessageAvgAggregateOutputType ? MessageAvgAggregateOutputType[P] : never
}
    
    

export type MessageSelect = {
  id?: boolean
  text?: boolean
  source?: boolean
  room?: boolean | RoomArgs
  user?: boolean | UserArgs
  roomId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MessageInclude = {
  room?: boolean | RoomArgs
  user?: boolean | UserArgs
}

export type MessageGetPayload<
  S extends boolean | null | undefined | MessageArgs,
  U = keyof S
> = S extends true
  ? Message
  : S extends undefined
  ? never
  : S extends MessageArgs | FindManyMessageArgs
  ? 'include' extends U
    ? Message  & {
      [P in TrueKeys<S['include']>]:
      P extends 'room'
      ? RoomGetPayload<S['include'][P]> :
      P extends 'user'
      ? UserGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Message ? Message[P]
: 
      P extends 'room'
      ? RoomGetPayload<S['select'][P]> :
      P extends 'user'
      ? UserGetPayload<S['select'][P]> : never
    }
  : Message
: Message


export interface MessageDelegate {
  /**
   * Find zero or one Message that matches the filter.
   * @param {FindOneMessageArgs} args - Arguments to find a Message
   * @example
   * // Get one Message
   * const message = await prisma.message.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneMessageArgs>(
    args: Subset<T, FindOneMessageArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
  /**
   * Find the first Message that matches the filter.
   * @param {FindFirstMessageArgs} args - Arguments to find a Message
   * @example
   * // Get one Message
   * const message = await prisma.message.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstMessageArgs>(
    args?: Subset<T, FindFirstMessageArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
  /**
   * Find zero or more Messages that matches the filter.
   * @param {FindManyMessageArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Messages
   * const messages = await prisma.message.findMany()
   * 
   * // Get first 10 Messages
   * const messages = await prisma.message.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyMessageArgs>(
    args?: Subset<T, FindManyMessageArgs>
  ): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>
  /**
   * Create a Message.
   * @param {MessageCreateArgs} args - Arguments to create a Message.
   * @example
   * // Create one Message
   * const Message = await prisma.message.create({
   *   data: {
   *     // ... data to create a Message
   *   }
   * })
   * 
  **/
  create<T extends MessageCreateArgs>(
    args: Subset<T, MessageCreateArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Delete a Message.
   * @param {MessageDeleteArgs} args - Arguments to delete one Message.
   * @example
   * // Delete one Message
   * const Message = await prisma.message.delete({
   *   where: {
   *     // ... filter to delete one Message
   *   }
   * })
   * 
  **/
  delete<T extends MessageDeleteArgs>(
    args: Subset<T, MessageDeleteArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Update one Message.
   * @param {MessageUpdateArgs} args - Arguments to update one Message.
   * @example
   * // Update one Message
   * const message = await prisma.message.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends MessageUpdateArgs>(
    args: Subset<T, MessageUpdateArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Delete zero or more Messages.
   * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
   * @example
   * // Delete a few Messages
   * const { count } = await prisma.message.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends MessageDeleteManyArgs>(
    args: Subset<T, MessageDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Messages.
   * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Messages
   * const message = await prisma.message.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends MessageUpdateManyArgs>(
    args: Subset<T, MessageUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Message.
   * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
   * @example
   * // Update or create a Message
   * const message = await prisma.message.upsert({
   *   create: {
   *     // ... data to create a Message
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Message we want to update
   *   }
   * })
  **/
  upsert<T extends MessageUpsertArgs>(
    args: Subset<T, MessageUpsertArgs>
  ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyMessageArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateMessageArgs>(args: Subset<T, AggregateMessageArgs>): Promise<GetMessageAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Message.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__MessageClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null>, Prisma__RoomClient<RoomGetPayload<T> | null>>;

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Message findOne
 */
export type FindOneMessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * Filter, which Message to fetch.
  **/
  where: MessageWhereUniqueInput
}


/**
 * Message findFirst
 */
export type FindFirstMessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * Filter, which Message to fetch.
  **/
  where?: MessageWhereInput
  orderBy?: XOR<Enumerable<MessageOrderByInput>, MessageOrderByInput>
  cursor?: MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<MessageDistinctFieldEnum>
}


/**
 * Message findMany
 */
export type FindManyMessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * Filter, which Messages to fetch.
  **/
  where?: MessageWhereInput
  /**
   * Determine the order of the Messages to fetch.
  **/
  orderBy?: XOR<Enumerable<MessageOrderByInput>, MessageOrderByInput>
  /**
   * Sets the position for listing Messages.
  **/
  cursor?: MessageWhereUniqueInput
  /**
   * The number of Messages to fetch. If negative number, it will take Messages before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Messages.
  **/
  skip?: number
  distinct?: Enumerable<MessageDistinctFieldEnum>
}


/**
 * Message create
 */
export type MessageCreateArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * The data needed to create a Message.
  **/
  data: MessageCreateInput
}


/**
 * Message update
 */
export type MessageUpdateArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * The data needed to update a Message.
  **/
  data: MessageUpdateInput
  /**
   * Choose, which Message to update.
  **/
  where: MessageWhereUniqueInput
}


/**
 * Message updateMany
 */
export type MessageUpdateManyArgs = {
  data: MessageUpdateManyMutationInput
  where?: MessageWhereInput
}


/**
 * Message upsert
 */
export type MessageUpsertArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * The filter to search for the Message to update in case it exists.
  **/
  where: MessageWhereUniqueInput
  /**
   * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
  **/
  create: MessageCreateInput
  /**
   * In case the Message was found with the provided `where` argument, update it with this data.
  **/
  update: MessageUpdateInput
}


/**
 * Message delete
 */
export type MessageDeleteArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
  /**
   * Filter which Message to delete.
  **/
  where: MessageWhereUniqueInput
}


/**
 * Message deleteMany
 */
export type MessageDeleteManyArgs = {
  where?: MessageWhereInput
}


/**
 * Message without action
 */
export type MessageArgs = {
  /**
   * Select specific fields to fetch from the Message
  **/
  select?: XOR<MessageSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<MessageInclude, null>
}



/**
 * Deep Input Types
 */


export type UserWhereInput = {
  AND?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
  OR?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
  NOT?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
  id?: XOR<IntFilter, number>
  nickName?: XOR<StringFilter, string>
  avatar?: XOR<StringFilter, string>
  password?: StringNullableFilter | string | null
  lang?: XOR<StringFilter, string>
  rooms?: RoomListRelationFilter
  messages?: MessageListRelationFilter
  isDeleted?: XOR<BoolFilter, boolean>
  createAt?: XOR<DateTimeFilter, Date | string>
  updateAt?: XOR<DateTimeFilter, Date | string>
}

export type UserOrderByInput = {
  id?: SortOrder
  nickName?: SortOrder
  avatar?: SortOrder
  password?: SortOrder
  lang?: SortOrder
  isDeleted?: SortOrder
  createAt?: SortOrder
  updateAt?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
}

export type RoomWhereInput = {
  AND?: XOR<RoomWhereInput, Enumerable<RoomWhereInput>>
  OR?: XOR<RoomWhereInput, Enumerable<RoomWhereInput>>
  NOT?: XOR<RoomWhereInput, Enumerable<RoomWhereInput>>
  id?: XOR<IntFilter, number>
  avatar?: XOR<StringFilter, string>
  code?: XOR<StringFilter, string>
  users?: UserListRelationFilter
  messages?: MessageListRelationFilter
  createAt?: XOR<DateTimeFilter, Date | string>
  updateAt?: XOR<DateTimeFilter, Date | string>
}

export type RoomOrderByInput = {
  id?: SortOrder
  avatar?: SortOrder
  code?: SortOrder
  createAt?: SortOrder
  updateAt?: SortOrder
}

export type RoomWhereUniqueInput = {
  id?: number
}

export type MessageWhereInput = {
  AND?: XOR<MessageWhereInput, Enumerable<MessageWhereInput>>
  OR?: XOR<MessageWhereInput, Enumerable<MessageWhereInput>>
  NOT?: XOR<MessageWhereInput, Enumerable<MessageWhereInput>>
  id?: XOR<IntFilter, number>
  text?: XOR<StringFilter, string>
  source?: XOR<StringFilter, string>
  room?: XOR<RoomRelationFilter, RoomWhereInput>
  user?: XOR<UserRelationFilter, UserWhereInput>
  roomId?: XOR<IntFilter, number>
  userId?: XOR<IntFilter, number>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type MessageOrderByInput = {
  id?: SortOrder
  text?: SortOrder
  source?: SortOrder
  roomId?: SortOrder
  userId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type MessageWhereUniqueInput = {
  id?: number
}

export type UserCreateInput = {
  nickName: string
  avatar: string
  password?: XOR<string, null>
  lang: string
  isDeleted?: boolean
  createAt?: Date | string
  updateAt?: Date | string
  rooms?: RoomCreateManyWithoutUsersInput
  messages?: MessageCreateManyWithoutUserInput
}

export type UserUpdateInput = {
  nickName?: XOR<string, StringFieldUpdateOperationsInput>
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  password?: string | NullableStringFieldUpdateOperationsInput | null
  lang?: XOR<string, StringFieldUpdateOperationsInput>
  isDeleted?: XOR<boolean, BoolFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  rooms?: RoomUpdateManyWithoutUsersInput
  messages?: MessageUpdateManyWithoutUserInput
}

export type UserUpdateManyMutationInput = {
  nickName?: XOR<string, StringFieldUpdateOperationsInput>
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  password?: string | NullableStringFieldUpdateOperationsInput | null
  lang?: XOR<string, StringFieldUpdateOperationsInput>
  isDeleted?: XOR<boolean, BoolFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type RoomCreateInput = {
  avatar: string
  code: string
  createAt?: Date | string
  updateAt?: Date | string
  users?: UserCreateManyWithoutRoomsInput
  messages?: MessageCreateManyWithoutRoomInput
}

export type RoomUpdateInput = {
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  users?: UserUpdateManyWithoutRoomsInput
  messages?: MessageUpdateManyWithoutRoomInput
}

export type RoomUpdateManyMutationInput = {
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type MessageCreateInput = {
  text: string
  source: string
  createdAt?: Date | string
  updatedAt?: Date | string
  room: RoomCreateOneWithoutMessagesInput
  user: UserCreateOneWithoutMessagesInput
}

export type MessageUpdateInput = {
  text?: XOR<string, StringFieldUpdateOperationsInput>
  source?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  room?: RoomUpdateOneRequiredWithoutMessagesInput
  user?: UserUpdateOneRequiredWithoutMessagesInput
}

export type MessageUpdateManyMutationInput = {
  text?: XOR<string, StringFieldUpdateOperationsInput>
  source?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type StringNullableFilter = {
  equals?: XOR<string, null>
  in?: XOR<Enumerable<string>, null>
  notIn?: XOR<Enumerable<string>, null>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type RoomListRelationFilter = {
  every?: RoomWhereInput
  some?: RoomWhereInput
  none?: RoomWhereInput
}

export type MessageListRelationFilter = {
  every?: MessageWhereInput
  some?: MessageWhereInput
  none?: MessageWhereInput
}

export type BoolFilter = {
  equals?: boolean
  not?: XOR<boolean, NestedBoolFilter>
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type UserListRelationFilter = {
  every?: UserWhereInput
  some?: UserWhereInput
  none?: UserWhereInput
}

export type RoomRelationFilter = {
  is?: RoomWhereInput
  isNot?: RoomWhereInput
}

export type UserRelationFilter = {
  is?: UserWhereInput
  isNot?: UserWhereInput
}

export type RoomCreateManyWithoutUsersInput = {
  create?: XOR<RoomCreateWithoutUsersInput, Enumerable<RoomCreateWithoutUsersInput>>
  connect?: XOR<RoomWhereUniqueInput, Enumerable<RoomWhereUniqueInput>>
  connectOrCreate?: XOR<RoomCreateOrConnectWithoutusersInput, Enumerable<RoomCreateOrConnectWithoutusersInput>>
}

export type MessageCreateManyWithoutUserInput = {
  create?: XOR<MessageCreateWithoutUserInput, Enumerable<MessageCreateWithoutUserInput>>
  connect?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  connectOrCreate?: XOR<MessageCreateOrConnectWithoutuserInput, Enumerable<MessageCreateOrConnectWithoutuserInput>>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: XOR<string, null>
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type RoomUpdateManyWithoutUsersInput = {
  create?: XOR<RoomCreateWithoutUsersInput, Enumerable<RoomCreateWithoutUsersInput>>
  connect?: XOR<RoomWhereUniqueInput, Enumerable<RoomWhereUniqueInput>>
  set?: XOR<RoomWhereUniqueInput, Enumerable<RoomWhereUniqueInput>>
  disconnect?: XOR<RoomWhereUniqueInput, Enumerable<RoomWhereUniqueInput>>
  delete?: XOR<RoomWhereUniqueInput, Enumerable<RoomWhereUniqueInput>>
  update?: XOR<RoomUpdateWithWhereUniqueWithoutUsersInput, Enumerable<RoomUpdateWithWhereUniqueWithoutUsersInput>>
  updateMany?: XOR<RoomUpdateManyWithWhereWithoutUsersInput, Enumerable<RoomUpdateManyWithWhereWithoutUsersInput>>
  deleteMany?: XOR<RoomScalarWhereInput, Enumerable<RoomScalarWhereInput>>
  upsert?: XOR<RoomUpsertWithWhereUniqueWithoutUsersInput, Enumerable<RoomUpsertWithWhereUniqueWithoutUsersInput>>
  connectOrCreate?: XOR<RoomCreateOrConnectWithoutusersInput, Enumerable<RoomCreateOrConnectWithoutusersInput>>
}

export type MessageUpdateManyWithoutUserInput = {
  create?: XOR<MessageCreateWithoutUserInput, Enumerable<MessageCreateWithoutUserInput>>
  connect?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  set?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  disconnect?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  delete?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  update?: XOR<MessageUpdateWithWhereUniqueWithoutUserInput, Enumerable<MessageUpdateWithWhereUniqueWithoutUserInput>>
  updateMany?: XOR<MessageUpdateManyWithWhereWithoutUserInput, Enumerable<MessageUpdateManyWithWhereWithoutUserInput>>
  deleteMany?: XOR<MessageScalarWhereInput, Enumerable<MessageScalarWhereInput>>
  upsert?: XOR<MessageUpsertWithWhereUniqueWithoutUserInput, Enumerable<MessageUpsertWithWhereUniqueWithoutUserInput>>
  connectOrCreate?: XOR<MessageCreateOrConnectWithoutuserInput, Enumerable<MessageCreateOrConnectWithoutuserInput>>
}

export type UserCreateManyWithoutRoomsInput = {
  create?: XOR<UserCreateWithoutRoomsInput, Enumerable<UserCreateWithoutRoomsInput>>
  connect?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
  connectOrCreate?: XOR<UserCreateOrConnectWithoutroomsInput, Enumerable<UserCreateOrConnectWithoutroomsInput>>
}

export type MessageCreateManyWithoutRoomInput = {
  create?: XOR<MessageCreateWithoutRoomInput, Enumerable<MessageCreateWithoutRoomInput>>
  connect?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  connectOrCreate?: XOR<MessageCreateOrConnectWithoutroomInput, Enumerable<MessageCreateOrConnectWithoutroomInput>>
}

export type UserUpdateManyWithoutRoomsInput = {
  create?: XOR<UserCreateWithoutRoomsInput, Enumerable<UserCreateWithoutRoomsInput>>
  connect?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
  set?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
  disconnect?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
  delete?: XOR<UserWhereUniqueInput, Enumerable<UserWhereUniqueInput>>
  update?: XOR<UserUpdateWithWhereUniqueWithoutRoomsInput, Enumerable<UserUpdateWithWhereUniqueWithoutRoomsInput>>
  updateMany?: XOR<UserUpdateManyWithWhereWithoutRoomsInput, Enumerable<UserUpdateManyWithWhereWithoutRoomsInput>>
  deleteMany?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
  upsert?: XOR<UserUpsertWithWhereUniqueWithoutRoomsInput, Enumerable<UserUpsertWithWhereUniqueWithoutRoomsInput>>
  connectOrCreate?: XOR<UserCreateOrConnectWithoutroomsInput, Enumerable<UserCreateOrConnectWithoutroomsInput>>
}

export type MessageUpdateManyWithoutRoomInput = {
  create?: XOR<MessageCreateWithoutRoomInput, Enumerable<MessageCreateWithoutRoomInput>>
  connect?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  set?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  disconnect?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  delete?: XOR<MessageWhereUniqueInput, Enumerable<MessageWhereUniqueInput>>
  update?: XOR<MessageUpdateWithWhereUniqueWithoutRoomInput, Enumerable<MessageUpdateWithWhereUniqueWithoutRoomInput>>
  updateMany?: XOR<MessageUpdateManyWithWhereWithoutRoomInput, Enumerable<MessageUpdateManyWithWhereWithoutRoomInput>>
  deleteMany?: XOR<MessageScalarWhereInput, Enumerable<MessageScalarWhereInput>>
  upsert?: XOR<MessageUpsertWithWhereUniqueWithoutRoomInput, Enumerable<MessageUpsertWithWhereUniqueWithoutRoomInput>>
  connectOrCreate?: XOR<MessageCreateOrConnectWithoutroomInput, Enumerable<MessageCreateOrConnectWithoutroomInput>>
}

export type RoomCreateOneWithoutMessagesInput = {
  create?: RoomCreateWithoutMessagesInput
  connect?: RoomWhereUniqueInput
  connectOrCreate?: RoomCreateOrConnectWithoutmessagesInput
}

export type UserCreateOneWithoutMessagesInput = {
  create?: UserCreateWithoutMessagesInput
  connect?: UserWhereUniqueInput
  connectOrCreate?: UserCreateOrConnectWithoutmessagesInput
}

export type RoomUpdateOneRequiredWithoutMessagesInput = {
  create?: RoomCreateWithoutMessagesInput
  connect?: RoomWhereUniqueInput
  update?: RoomUpdateWithoutMessagesInput
  upsert?: RoomUpsertWithoutMessagesInput
  connectOrCreate?: RoomCreateOrConnectWithoutmessagesInput
}

export type UserUpdateOneRequiredWithoutMessagesInput = {
  create?: UserCreateWithoutMessagesInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutMessagesInput
  upsert?: UserUpsertWithoutMessagesInput
  connectOrCreate?: UserCreateOrConnectWithoutmessagesInput
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type NestedStringNullableFilter = {
  equals?: XOR<string, null>
  in?: XOR<Enumerable<string>, null>
  notIn?: XOR<Enumerable<string>, null>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedBoolFilter = {
  equals?: boolean
  not?: XOR<boolean, NestedBoolFilter>
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type RoomCreateWithoutUsersInput = {
  avatar: string
  code: string
  createAt?: Date | string
  updateAt?: Date | string
  messages?: MessageCreateManyWithoutRoomInput
}

export type RoomCreateOrConnectWithoutusersInput = {
  where: RoomWhereUniqueInput
  create: RoomCreateWithoutUsersInput
}

export type MessageCreateWithoutUserInput = {
  text: string
  source: string
  createdAt?: Date | string
  updatedAt?: Date | string
  room: RoomCreateOneWithoutMessagesInput
}

export type MessageCreateOrConnectWithoutuserInput = {
  where: MessageWhereUniqueInput
  create: MessageCreateWithoutUserInput
}

export type RoomUpdateWithWhereUniqueWithoutUsersInput = {
  where: RoomWhereUniqueInput
  data: RoomUpdateWithoutUsersInput
}

export type RoomUpdateManyWithWhereWithoutUsersInput = {
  where: RoomScalarWhereInput
  data: RoomUpdateManyMutationInput
}

export type RoomScalarWhereInput = {
  AND?: XOR<RoomScalarWhereInput, Enumerable<RoomScalarWhereInput>>
  OR?: XOR<RoomScalarWhereInput, Enumerable<RoomScalarWhereInput>>
  NOT?: XOR<RoomScalarWhereInput, Enumerable<RoomScalarWhereInput>>
  id?: XOR<IntFilter, number>
  avatar?: XOR<StringFilter, string>
  code?: XOR<StringFilter, string>
  createAt?: XOR<DateTimeFilter, Date | string>
  updateAt?: XOR<DateTimeFilter, Date | string>
}

export type RoomUpsertWithWhereUniqueWithoutUsersInput = {
  where: RoomWhereUniqueInput
  update: RoomUpdateWithoutUsersInput
  create: RoomCreateWithoutUsersInput
}

export type MessageUpdateWithWhereUniqueWithoutUserInput = {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutUserInput
}

export type MessageUpdateManyWithWhereWithoutUserInput = {
  where: MessageScalarWhereInput
  data: MessageUpdateManyMutationInput
}

export type MessageScalarWhereInput = {
  AND?: XOR<MessageScalarWhereInput, Enumerable<MessageScalarWhereInput>>
  OR?: XOR<MessageScalarWhereInput, Enumerable<MessageScalarWhereInput>>
  NOT?: XOR<MessageScalarWhereInput, Enumerable<MessageScalarWhereInput>>
  id?: XOR<IntFilter, number>
  text?: XOR<StringFilter, string>
  source?: XOR<StringFilter, string>
  roomId?: XOR<IntFilter, number>
  userId?: XOR<IntFilter, number>
  createdAt?: XOR<DateTimeFilter, Date | string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type MessageUpsertWithWhereUniqueWithoutUserInput = {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutUserInput
  create: MessageCreateWithoutUserInput
}

export type UserCreateWithoutRoomsInput = {
  nickName: string
  avatar: string
  password?: XOR<string, null>
  lang: string
  isDeleted?: boolean
  createAt?: Date | string
  updateAt?: Date | string
  messages?: MessageCreateManyWithoutUserInput
}

export type UserCreateOrConnectWithoutroomsInput = {
  where: UserWhereUniqueInput
  create: UserCreateWithoutRoomsInput
}

export type MessageCreateWithoutRoomInput = {
  text: string
  source: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: UserCreateOneWithoutMessagesInput
}

export type MessageCreateOrConnectWithoutroomInput = {
  where: MessageWhereUniqueInput
  create: MessageCreateWithoutRoomInput
}

export type UserUpdateWithWhereUniqueWithoutRoomsInput = {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutRoomsInput
}

export type UserUpdateManyWithWhereWithoutRoomsInput = {
  where: UserScalarWhereInput
  data: UserUpdateManyMutationInput
}

export type UserScalarWhereInput = {
  AND?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
  OR?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
  NOT?: XOR<UserScalarWhereInput, Enumerable<UserScalarWhereInput>>
  id?: XOR<IntFilter, number>
  nickName?: XOR<StringFilter, string>
  avatar?: XOR<StringFilter, string>
  password?: StringNullableFilter | string | null
  lang?: XOR<StringFilter, string>
  isDeleted?: XOR<BoolFilter, boolean>
  createAt?: XOR<DateTimeFilter, Date | string>
  updateAt?: XOR<DateTimeFilter, Date | string>
}

export type UserUpsertWithWhereUniqueWithoutRoomsInput = {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutRoomsInput
  create: UserCreateWithoutRoomsInput
}

export type MessageUpdateWithWhereUniqueWithoutRoomInput = {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutRoomInput
}

export type MessageUpdateManyWithWhereWithoutRoomInput = {
  where: MessageScalarWhereInput
  data: MessageUpdateManyMutationInput
}

export type MessageUpsertWithWhereUniqueWithoutRoomInput = {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutRoomInput
  create: MessageCreateWithoutRoomInput
}

export type RoomCreateWithoutMessagesInput = {
  avatar: string
  code: string
  createAt?: Date | string
  updateAt?: Date | string
  users?: UserCreateManyWithoutRoomsInput
}

export type RoomCreateOrConnectWithoutmessagesInput = {
  where: RoomWhereUniqueInput
  create: RoomCreateWithoutMessagesInput
}

export type UserCreateWithoutMessagesInput = {
  nickName: string
  avatar: string
  password?: XOR<string, null>
  lang: string
  isDeleted?: boolean
  createAt?: Date | string
  updateAt?: Date | string
  rooms?: RoomCreateManyWithoutUsersInput
}

export type UserCreateOrConnectWithoutmessagesInput = {
  where: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
}

export type RoomUpdateWithoutMessagesInput = {
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  users?: UserUpdateManyWithoutRoomsInput
}

export type RoomUpsertWithoutMessagesInput = {
  update: RoomUpdateWithoutMessagesInput
  create: RoomCreateWithoutMessagesInput
}

export type UserUpdateWithoutMessagesInput = {
  nickName?: XOR<string, StringFieldUpdateOperationsInput>
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  password?: string | NullableStringFieldUpdateOperationsInput | null
  lang?: XOR<string, StringFieldUpdateOperationsInput>
  isDeleted?: XOR<boolean, BoolFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  rooms?: RoomUpdateManyWithoutUsersInput
}

export type UserUpsertWithoutMessagesInput = {
  update: UserUpdateWithoutMessagesInput
  create: UserCreateWithoutMessagesInput
}

export type RoomUpdateWithoutUsersInput = {
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  code?: XOR<string, StringFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  messages?: MessageUpdateManyWithoutRoomInput
}

export type MessageUpdateWithoutUserInput = {
  text?: XOR<string, StringFieldUpdateOperationsInput>
  source?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  room?: RoomUpdateOneRequiredWithoutMessagesInput
}

export type UserUpdateWithoutRoomsInput = {
  nickName?: XOR<string, StringFieldUpdateOperationsInput>
  avatar?: XOR<string, StringFieldUpdateOperationsInput>
  password?: string | NullableStringFieldUpdateOperationsInput | null
  lang?: XOR<string, StringFieldUpdateOperationsInput>
  isDeleted?: XOR<boolean, BoolFieldUpdateOperationsInput>
  createAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updateAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  messages?: MessageUpdateManyWithoutUserInput
}

export type MessageUpdateWithoutRoomInput = {
  text?: XOR<string, StringFieldUpdateOperationsInput>
  source?: XOR<string, StringFieldUpdateOperationsInput>
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  user?: UserUpdateOneRequiredWithoutMessagesInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
